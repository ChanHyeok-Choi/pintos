             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jungmin Park <jm971004@unist.ac.kr>
Chanhyeok Choi <chan4184@unist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

char *cmd;                    - Temporarily, it stores entire file_name to tokenize it to get a first token
char *first_token, *save_ptr; - Static variables to use strtok_r()
char *tokens[32];             - Memory space to save a given file, arbitrary size is 32
int arg_cnt;                  - Current number of arguments being processed

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Program flow: main() -> run_action() -> run_task() -> ifdef USERPROG -> process_execute()
There is a problem in process_execute(): It could not parse arguments of file_name. So, it passed whole command liens into thread_create().
Therefore, first token should be passed to thread_create() as thread_name, using strtok_r() function from string.c in order to chop off each token!
After a thread is created, start_process() is executed, in which the passed tokens(or arguments) should be saved in user space(or stack).
We decided to follow the 80x86 Calling Convetion that is described on the stanford site: 
    When function is called, arguments would be saved in order (right -> left). 
    Return address would be next instruction address of Caller. 
    Return value of Callee should be saved into the eax register.

So, we made save_user_stack() that is following:
    A function that saves program name and arguments into user stack. 
    tokens: memory space where program name and arguments saved.
    arg_cnt: number of arguments.
    esp: address pointing to stack pointer.

By the convention, we were able to store the arguments down the stack. In the function, the arguments are scanned through backwards, so that the first token is
the last argument, the last token is the first argument. We could just keep decreasing esp pointer to setup the argv[] elements. 
That is, we could arrange for the elements of argv[] to be in the right order.

Since we restricted the number of arguments to 32, this will make sure that if the number of arguments exceeds 32, argv would be freed then
the thread is exited, which avoids overflowing of the stack page.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Unlike strtok(), strtok_r() uses an extra argument for saving the position of next token, 
which help thread safe and can be used in nested loop.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. Prevent from passing bad arguments into kernel. That is, checking the command before passing it into kernel
   to avoid kernel fail.
2. The shell separates commands, which shortens the time in kernel.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* threads/thread.h */
struct thread {
    ...
    struct file **file_descriptor_table; - File descriptor table in kernel address space. 
    int next_fd;                         - Next file descripter. 
    ...
}

/* userprog/syscall.h */
struct lock filesys_lock; - A lock used by syscalls to ensure only one thread at a time is accessing file system 

/* userprog/syscall.c */
int syscall_number = *(int *)f->esp; - static variable to check a syscall number, used on switch statement.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

In our implementation, file descriptors are stored in file descriptor table, where they matches to each file
by one-to-one and can be used through syscalls to access file. The file descriptor is unique within the entire OS.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
