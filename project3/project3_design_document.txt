        +---------------------------+
        |   CS 140                  |
        | PROJECT 3: VIRTUAL MEMORY |
        |    DESIGN DOCUMENT        |
        +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jungmin Park <jm971004@unist.ac.kr>
Chanhyeok Choi <chan4184@unist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

      PAGE TABLE MANAGEMENT
      =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h:
struct thread {
      ...
      /* Shared between thread.c and vm/page.c. */
      /* Since virtual address space is allocated each process, hash table for managing virtual pages should be defined. */
      struct hash vm;                     /* Hash table managing virtual address space that thread has. */
      ...
}

In page.h:
#define VM_ELF 0
#define VM_FILE 1
#define VM_SWAP 2

/* Data structure that loads necessary pages by separating logical and physical addresses. */
struct vm_entry {
   uint8_t type;              /* Type of VM_ELF, VM_FILE, and VM_SWAP. */
   void *vaddr;               /* Virtual page number of vm_entry. */
   bool writable_flag;        /* Flag that determines whether write is possible or not. Ture: writable, False: impossbile. */
   
   bool load_flag;            /* Flag that informs whether load on physical memory is done or not. */
   struct file* file;         /* File mapped to virtual address. */

   size_t offset;             /* Offset of file to read. */
   size_t read_bytes;         /* Size of data that is written to virtual page. */
   size_t zero_bytes;         /* Bytes of remained page to fill with 0. */

   struct hash_elem hash_elem;/* Hash table element. */
   ...
};

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We implemented virtual memory entry to reference page table and manage frames. 
   Example:
    1. Suppose that we access virtual address of 0x0804bec0 w.r.t. 0x0804b000 (0x is page directory index, 0804b is virtual page number index, and ec0 is offset).
    2. Then, 0x0804b000 page will be requested, where a frame is not mapped in the reference page table.
    3. So, allocate physical memory for that frame.
    4. Load a related file contents into physical memory. 
    5. Map virtual page with physical frame, in that we should check read/write authorization. 
       (Because reading an information for offset is needed when allocation of physical memory.)


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Actually, we just implemented the design of accessing the data to avoid the issue.
e.g., we just check the accessed bit at select_victim_out(). Because the bit is set to 1
whenever a page is referenced. Also, dirty bit in page table is set to 1 by HW whenever 
written to relevant memory space. So, when page with dirty bit 1 is selected with 'victim',
we should write the page into disk.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We used LRU_lock for avoiding the race condition. Whenever page allocation or free occurs,
acquiring the lock and releasing it take place.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We used chaining hash table for the data structure. Because when hash values conflict each other,
elements of the values will be managed by list. Therefore we used hash table for managing virtual memory entries.

Hash table for managing vm_entries:
      On process created:
            initialize hash table
            create vm_entries for virtual page of process
      On process executing:
            When page fault occurs, search vm_entry w.r.t. address where page fault occurs through hash table.
      On process terminated:
            Free bucket list of hash table and data structure for vm_entry.

           PAGING TO AND FROM DISK
           =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In page.h:
struct vm_entry {
   ...
   /* Swapping. */
   size_t swap_slot;          /* Swap slot. 4KB */
   ...
};

struct page {
   void *kaddr;            /* Physical address of page. */
   struct vm_entry *vmE;   /* vm_entry pointer for virtual address mapped to physical page. */
   struct thread *thread;  /* thread pointer for the physical page. */
   struct list_elem LRU;   /* element for LRU list. */
};

In frame.c:
struct list LRU_list;           /* list of physical pages allocated to user process. */
struct lock LRU_lock;           /* Lock for LRU. */
struct list_elem *clock_for_LRU; /* Element for clock algorithm. */

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We implemented two functions for that situation: swap_in() and swap_out().
      swap_in: memory contents -> disk swap space
      swap_out: swap-outed page -> memory
In addition, we adopted a clock algorithm based on LRU algorithm:
      Select victim through moving pointer clockwise. Examine the reference bit of page
      w.r.t. pointer:
            if 0: that page will be a victim.
            else (if 1): reset the bit to 0.
      After progressing pointer at one step, the above mechanism is repeated.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When the frame of Q is selected, we can get the thread of Q and free the page of Q
using pagedir_clear_page(). In details, this would be executed in free_page().
So, we now guarantee that the frame Q no longer has.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Actually, we failed to implement the relevant code. But, we can design as following algorithm:
      When access to over-stack-sized address occurs, determine whether the access is valid or
      invalid (= segment fault). If valid access(accessed address > stack pointer - 32), extand 
      stack upto arbitrarily 8MB. Otherwise, exit(-1).


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We used a single lock for synchronization and to prevent deadlock. Also,
we used clock algorithm based on LRU by list and lock. For managing swap partition,
spare swap slot will be searched by first-fit algorithm.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

We used a lock for each struct page. And pages have their own vm_entry and LRU.
LRU is element for LRU list, which can be locked whenever page allocation or free.
This lock mechanism allows us to avoid a race between different proccesses evicting
a frame pr faulting a page.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

When finding victim, we used clock algorithm. If accessed bit is set to 1, pass it and set to 0,
otherwise, choose it for victim. By doing this, we can avoid the above situation.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

       MEMORY MAPPED FILES
       ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In page.h:
struct vm_entry {
   ...
   /* Memory Mapped File. */
   struct list_elem mm_elem;  /* mm list element. */
   ...
};

struct mm_file {
   ...
   int mmId;               /* Once succeeded, returned mapping id. */
   struct file* file;      /* File object of mapping file. */
   struct list_elem elem;  /* Struct for connecting list of mm_files. */
   struct list vmE_list;   /* List of all of vm_entry w.r.t. mm_file. */
   ...
};

In thread.h:
struct thread {
   ...
   struct list mm_list;     /* List for files mapping memory. */
   int next_mmId;           /* Pointer to next mm. */
   ...
}

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Mapping file to process address space. i.e., each process has its list of
memory mapped file. On startup process, the list is initialized, then 
mmap() and munmap() would be run by system call.

mmap() loads file data into memory by demanding paging. Once succeeded, it will
return mapping id, otherwise, return -1 (error). First, it check arguments:
file descripter and starting mapping address. If they are valid, file object would
be copied by file_reopen() in order to maintain efficiency of mmap(). Then, it allocates
mapping id and creates & initializes memory mapping file and relevant virtual memory entry.
Eventually, it returns the memory mapping id.

munmap() clears all of vm_entries w.r.t. memory mapping id in list of memory mapping files.
Especially, if physical page w.r.t. virtual address to vm_entry exists and dirty, it records
memory contents into disk.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Whenever mmap() system call takes place, we designed to check whether the address already
exists or not in virtual page table by find_vm_entry() in mmap(). 

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We felt the similiarity between processes for implementing memory mapping file.
So, we designed that they can share much of semantics through the data structure: vm_entry.
In addition, we think that the sharing of data may reduce redundancy, which makes better
efficiency. 

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

VM is the hardest task for assignments as we think..

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Replacement policy and management of virtual address let us think exhaustively
about OS design.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
